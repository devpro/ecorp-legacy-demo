# GitLab pipeline (configured in "Settings" > "CI/CD")
# - Runners
#   - Can be run on GitLab shared (https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/) or specific runners
# - Variables
#   - CONTAINER_REGISTRY_PASSWD
#   - CONTAINER_REGISTRY_USER
#   - CONTAINER_REGISTRY_DOMAIN
#   - CONTAINER_REGISTRY_FOLDER
# ===============

variables:
  CONTAINER_REPOSITORY: "${CONTAINER_REGISTRY_DOMAIN}/${CONTAINER_REGISTRY_FOLDER}/ecorp-legacy-aspnetmvcdemo"
  CONTAINER_APP_VERSION: "1.0.$CI_PIPELINE_ID"

stages:
  - integrate
  - package

# Continuous Integration
# ---------------------

code-quality:
  stage: integrate
  # [Gilab-SharedRunner] image won't be used
  image: mcr.microsoft.com/dotnet/framework/sdk:4.8
  tags:
    - windows
    - windows-1809
    # [Gilab-SpecificRunner]
    - azurevm
    - net48
    # [Gilab-SharedRunner]
    #- shared-windows
  before_script:
    # installs chocolatey (needed later)
    - Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))  
    # [Gilab-SharedRunner] installs .NET Framework 4.8 (https://dotnet.microsoft.com/en-us/download/dotnet-framework/net48)
    # .runtime is not enough (https://www.manageengine.com/products/desktop-central/software-installation/silent_install_Microsoft-.NET-Framework-4.8.html)
    # developer pack link (https://dotnet.microsoft.com/en-us/download/dotnet-framework/thank-you/net48-developer-pack-offline-installer) is a redirect link (can't be downloaded like this) so we use chocolatey
    #- choco install -y netfx-4.8-devpack
    # [Gilab-SharedRunner] installs nuget
    #- choco install -y Nuget.CommandLine
    # installs Visual Studio 2022 Build tools
    - choco install -y visualstudio2022buildtools
  script:
    - cd dotnet
    # downloads .NET dependencies
    - nuget restore
    # builds the .NET solution
    - "& 'C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools/MSBuild/Current/Bin/amd64/MSBuild.exe'"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
      allow_failure: true

# Continuous Delivery (Packaging)
# -------------------------------

container-image:
  stage: package
  # [Gilab-SharedRunner] image won't be used
  # https://github.com/docker-library/docker/blob/master/20.10/windows/windowsservercore-1809/Dockerfile
  image: docker:20.10-windowsservercore-1809
  tags:
    - windows
    - windows-1809
    # [Gilab-SpecificRunner]
    - azurevm
    - docker
    # [Gilab-SharedRunner]
    #- shared-windows
  before_script:
    - docker info
  script:
    - docker build -f dotnet/src/AspNetMvcDemoWebApp/Dockerfile -t ${CONTAINER_REPOSITORY}:${CONTAINER_APP_VERSION} dotnet/
    - docker login -u $CONTAINER_REGISTRY_USER -p $CONTAINER_REGISTRY_PASSWD $CONTAINER_REGISTRY_DOMAIN
    - if ( "${CI_COMMIT_BRANCH}" -eq "${CI_DEFAULT_BRANCH}" ) { docker push ${CONTAINER_REPOSITORY}:${CONTAINER_APP_VERSION} }
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
  # pulling sdk images can be long on GitLab shared runner
  timeout: 1h 30m
